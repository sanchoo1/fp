import cv2
import numpy as np
from threading import Thread, Lock
import queue

import util

def capture(kinect, frame_dict):
    while True:
        c_frame = kinect.get_color_frame()
        d_frame = kinect.get_depth_frame()
        
        if c_frame is not None and d_frame is not None:
            frame_dict['color'] = c_frame
            frame_dict['depth'] = d_frame

def aruc(aruco, stat_dict, frame_dict):
    while True:
        c_frame = frame_dict.get("color", None)
        if c_frame is not None:
            if stat_dict['pos']:
                RT, frame = aruco.get_camera_pose_from_aruco_markers(c_frame)
                stat_dict['rt'] = RT
                frame_dict['aruco'] = frame
            else:            
                corners, _, frame = aruco.detected(c_frame)              
                stat_dict['markers'] = len(corners)
                if len(corners) < 2:
                    text = str(len(corners)) + " marker being detected"
                else:
                    text = str(len(corners)) + " markers being detected"
                org = (50, 50)
                fontFace = cv2.FONT_HERSHEY_SIMPLEX
                fontScale = 1
                color = (255, 0, 0)
                thickness = 2
                cv2.putText(frame, text, org, fontFace, fontScale, color, thickness, cv2.LINE_AA)
                frame_dict['aruco'] = frame

def compute_pos(dd, x, y, stat_dict):
    nearest = util.spiral_search(dd, x, y)
    print(nearest)
    if nearest is not None:
        dcam = util.getCameraCoo(nearest[2])
        rt = stat_dict.get("rt", None)
        if rt is not None:
            w = util.getPosition(dcam, rt, util.MyKinect())
            print(w)
            stat_dict['w'] = w
            stat_dict['pos'] = False

def ON_EVENT_LBUTTONDOWN(event, y, x, flags, param):
    if event == cv2.EVENT_LBUTTONDOWN:
        param[1]['pos'] = True
        if param[1]['markers'] > 0:

            d_frame = param[0].get("depth", None)
            if d_frame is not None:
                dd = util.generateD(d_frame)
                xx = x + 432
                yy = y + 16
                compute_thread = Thread(target= compute_pos, args= (dd, xx, yy, param[1]))
                compute_thread.start()
            


def detection(frame_dict, stat_dict):
    cv2.namedWindow('cut', cv2.WINDOW_NORMAL)
    cv2.resizeWindow('cut', [1056, 1056])
    cv2.setMouseCallback('cut', ON_EVENT_LBUTTONDOWN, param= [frame_dict,stat_dict])
    while True:
        c_frame = frame_dict.get("color", None)
        if c_frame is not None:
            cut = c_frame[12:1068, 432:1488]
            cv2.imshow('cut', cut)
            if cv2.waitKey(1) == 'q':
                break
    
    cv2.destroyWindow('cut')

    #         annotated = yolo.annotate(cut)
    #         frame_dict['od'] = annotated



def display(frame_dict, index, window_name, size= [1920, 1080]):
    cv2.namedWindow(window_name, cv2.WINDOW_NORMAL)
    cv2.resizeWindow(window_name, size)   
    while True:
        d = frame_dict.get(index, None)
        if d is not None:
           cv2.imshow(window_name, d)
        if cv2.waitKey(1) == 'q':
            break

def main():
    kinect = util.MyKinect()
    aruco = util.MyAruco()
    yolo = util.Yolo8()


    frame_dict = {}
    stat_dict = {}
    stat_dict['pos'] = False


    capture_thread = Thread(target=capture, args=(kinect, frame_dict))
    #display0_thread = Thread(target=display, args=(frame_dict, "od", "objectDetection", [1056, 1056]))
    display1_thread = Thread(target=display, args=(frame_dict, "aruco", "Aruco"))
    cali_thread = Thread(target=aruc,args=(aruco, stat_dict, frame_dict))
    cut_thread = Thread(target=detection, args=(frame_dict, stat_dict))

    capture_thread.start()
    #display0_thread.start()
    display1_thread.start()
    cali_thread.start()
    cut_thread.start()


    capture_thread.join()
    #display0_thread.join()
    display1_thread.join()
    cali_thread.join()
    cut_thread.join()

    cv2.destroyAllWindows()




if __name__ == "__main__":
    main()